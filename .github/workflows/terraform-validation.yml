name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform_validation:
    name: Terraform Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.9"  # Replace with your preferred Terraform version

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

  terraform_scan:
    name: Terraform Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Terraform TFLint
        uses: terraform-linters/tflint-action@v2

  terraform_release:
    name: Terraform Release
    needs: [terraform_validation, terraform_scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Only release on push to main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Add steps to perform the actual Terraform deployment here, such as using Terraform Cloud/Enterprise or CLI commands.

      # Example Terraform apply step:
      # - name: Terraform Apply
      #   run: terraform apply -auto-approve

      # You can also use GitHub Releases to create a release with your Terraform code as an artifact.
      name: Terraform CI/CD

      on:
        push:
          branches:
            - main
        pull_request:
          branches:
            - main
      
      jobs:
        terraform_validation:
          name: Terraform Validation
          runs-on: ubuntu-latest
      
          steps:
            - name: Checkout code
              uses: actions/checkout@v2
      
            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_version: "1.0.9"  # Replace with your preferred Terraform version
      
            - name: Terraform Init
              run: terraform init
      
            - name: Terraform Format Check
              run: terraform fmt -check
      
            - name: Terraform Validate
              run: terraform validate
      
        terraform_scan:
          name: Terraform Security Scanning
          runs-on: ubuntu-latest
      
          steps:
            - name: Checkout code
              uses: actions/checkout@v2
      
            - name: Run Terraform TFLint
              uses: terraform-linters/tflint-action@v2
      
        terraform_release:
          name: Terraform Release
          needs: [terraform_validation, terraform_scan]
          runs-on: ubuntu-latest
          if: github.event_name == 'push'  # Only release on push to main branch
      
          steps:
            - name: Checkout code
              uses: actions/checkout@v2
      
            # Add steps to perform the actual Terraform deployment here, such as using Terraform Cloud/Enterprise or CLI commands.
      
            # Example Terraform apply step:
            # - name: Terraform Apply
            #   run: terraform apply -auto-approve
      
            # You can also use GitHub Releases to create a release with your Terraform code as an artifact.
      